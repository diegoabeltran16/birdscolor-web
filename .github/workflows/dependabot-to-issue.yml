name: Create High/Critical Dependabot Issues

on:
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * *'

jobs:
  create-issues:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - name: Fetch open Dependabot alerts
        id: fetch_alerts
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_FINEGRAINED }}
          script: |
            const response = await github.rest.dependabot.listAlertsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open",
              per_page: 100
            });
            return response.data;
      - name: Create issues for high/critical alerts only
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_FINEGRAINED }}
          script: |
            const alerts = JSON.parse(process.env.ALERTS_PAYLOAD);
            for (const alert of alerts) {
              const sev = alert.security_advisory.severity.toLowerCase();
              if (!['high','critical'].includes(sev)) continue;
              const pkg = alert.dependency.package;
              const title = `🚨 [${sev.toUpperCase()}] ${alert.security_advisory.summary} in ${pkg.ecosystem}:${pkg.name}`;
              const bodyLines = [
                `### ⚠️ Vulnerabilidad detectada (Severidad: ${sev.toUpperCase()})`,
                ``,
                `**Paquete afectado:** \`${pkg.name}\`  `,
                `**Ecosistema:** ${pkg.ecosystem}  `,
                `**Vulnerabilidad:** ${alert.security_advisory.summary}  `,
                ``,
                `**Descripción completa:**`,
                alert.security_advisory.description,
                ``,
                `**Dependabot URL:** [Ver alerta](${alert.html_url})`,
                ``,
                `---`,
                `Este issue ha sido generado automáticamente.`
              ];
              const body = bodyLines.join('\n');
              const { data: existing } = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: "open",
                labels: "dependabot,security"
              });
              if (!existing.find(i => i.title === title)) {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title,
                  body,
                  labels: ["dependabot","security"]
                });
              }
            }
        env:
          ALERTS_PAYLOAD: ${{ toJson(steps.fetch_alerts.outputs.result) }}
