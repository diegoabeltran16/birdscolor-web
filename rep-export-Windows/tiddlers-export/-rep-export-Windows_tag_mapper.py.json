{
  "title": "-rep-export-Windows_tag_mapper.py",
  "text": "## [[Tags]]\n[[Python]]\n\n```python\n#!/usr/bin/env python3\n\"\"\"\nüì¶ M√≥dulo: tag_mapper.py (Windows)\nüéØ Plataforma: Windows\n\nFunci√≥n\n=======\nAsigna tags sem√°nticos a cada archivo del repositorio.  \nOrden de precedencia:\n1. Tags personalizados desde JSON en `tiddler_tag_doc/` (misma carpeta).  \n2. Tag derivado por extensi√≥n o nombre especial.  \n3. Fallback `[[--- üß¨ Por Clasificar]]`.\n\nLos tags devueltos sirven para que el selector de modelo de embeddings elija el\nmodelo √≥ptimo (Python ‚áí CodeBERT, Markdown ‚áí MiniLM, etc.).\n\nSalida\n------\n`List[str]` con tags en sintaxis TiddlyWiki (`[[TagName]]`).\n\"\"\"\nimport json\nimport os\nfrom pathlib import Path\nfrom typing import List\n\n# ========================================\n# ‚öôÔ∏è Rutas y carga de JSON personalizados\n# ========================================\nTIDDLER_TAG_DIR = Path(__file__).resolve().parent / \"tiddler_tag_doc\"\n\ntitle_to_tags: dict[str, List[str]] = {}\nif TIDDLER_TAG_DIR.exists():\n    for json_file in sorted(TIDDLER_TAG_DIR.glob(\"*.json\")):\n        try:\n            with open(json_file, \"r\", encoding=\"utf-8\") as f:\n                data = json.load(f)\n            if isinstance(data, list):\n                for item in data:\n                    title = item.get(\"title\", \"\").strip()\n                    tags_str = item.get(\"tags\", \"\").strip()\n                    if title and tags_str:\n                        title_to_tags[title] = tags_str.split()\n        except Exception as e:\n            print(f\"‚ö†Ô∏è Error leyendo {json_file.name}: {e}\")\n\n# ========================================\n# üóÇÔ∏è Mapeo extensi√≥n ‚Üí Tag\n# ========================================\nEXTENSION_TAG_MAP = {\n    # Code / scripting\n    \".py\": \"Python\", \".js\": \"JavaScript\", \".ts\": \"TypeScript\", \".go\": \"Go\", \".rs\": \"Rust\",\n    \".java\": \"Java\", \".c\": \"C\", \".cpp\": \"C++\", \".cc\": \"C++\", \".hpp\": \"C++\",\n    \".rb\": \"Ruby\", \".php\": \"PHP\", \".kt\": \"Kotlin\", \".swift\": \"Swift\",\n    \".sh\": \"Shell\", \".bash\": \"Shell\", \".ps1\": \"PowerShell\", \".bat\": \"Batch\",\n    \".lua\": \"Lua\", \".pl\": \"Perl\",\n    # Markup / data\n    \".md\": \"Markdown\", \".rst\": \"reStructuredText\", \".html\": \"HTML\", \".htm\": \"HTML\",\n    \".css\": \"CSS\", \".xml\": \"XML\", \".json\": \"JSON\", \".yml\": \"YAML\", \".yaml\": \"YAML\",\n    \".toml\": \"TOML\", \".csv\": \"CSV\", \".sql\": \"SQL\",\n    # Bio‚Äëinform√°tica\n    \".fasta\": \"BioSeq\", \".fastq\": \"BioSeq\", \".vcf\": \"VCF\", \".pdb\": \"Protein3D\",\n    # Docs & others\n    \".tex\": \"LaTeX\", \".cfg\": \"Config\", \".ini\": \"Config\", \".log\": \"Log\", \".txt\": \"Text\"\n}\n\nSPECIAL_FILENAMES = {\n    \"Dockerfile\": \"Dockerfile\",\n    \"Makefile\": \"Makefile\",\n    \"README\": \"README\",\n    \"LICENSE\": \"License\"\n}\n\nDEFAULT_TAG = \"--- üß¨ Por Clasificar\"\n\n# ========================================\n# üîé API principal\n# ========================================\n\ndef get_tags_for_file(file_path: Path) -> List[str]:\n    \"\"\"Devuelve lista de tags TiddlyWiki para `file_path`.\"\"\"\n    # Construir t√≠tulo est√°ndar (-ruta_con_guiones)\n    try:\n        root_dir = Path(__file__).resolve().parents[1]\n        rel_title = \"-\" + str(file_path.relative_to(root_dir)).replace(os.sep, \"_\")\n    except Exception:\n        rel_title = \"-\" + file_path.name\n\n    # 1) ¬øExiste en JSON personalizados?\n    if rel_title in title_to_tags:\n        return title_to_tags[rel_title]\n\n    # 2) Derivar por extensi√≥n / nombre\n    name = file_path.name\n    ext = file_path.suffix.lower()\n    if name in SPECIAL_FILENAMES:\n        tag = SPECIAL_FILENAMES[name]\n    elif ext in EXTENSION_TAG_MAP:\n        tag = EXTENSION_TAG_MAP[ext]\n    else:\n        tag = DEFAULT_TAG\n\n    return [f\"[[{tag}]]\"]\n\n# CLI para pruebas r√°pidas\nif __name__ == \"__main__\":\n    import sys\n    if len(sys.argv) < 2:\n        print(\"Uso: python tag_mapper.py <ruta_archivo>\")\n        sys.exit(1)\n    path = Path(sys.argv[1])\n    print(get_tags_for_file(path))\n\n```",
  "tags": "[[Python]]",
  "type": "text/markdown",
  "created": "20250605155046623",
  "modified": "20250605155046623"
}