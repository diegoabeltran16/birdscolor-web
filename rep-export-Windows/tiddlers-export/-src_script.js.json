{
  "title": "-src_script.js",
  "text": "## [[Tags]]\nJavaScript [[--- 🌀 Helices de desarrollo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[--- Codigo]] [[⚙️🧬 src/]]\n\n```javascript\n// Definimos la función de redirección de forma global\nwindow.redirectTo = function(url) {\n    console.log(\"Redirigiendo a:\", url);\n    window.location.href = url;\n};\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    console.log(\"DOM completamente cargado en script.js\");\n\n    const pollito = document.getElementById(\"icono\");\n    const spinner = document.getElementById(\"spinner\");\n    if (!pollito || !spinner) {\n        console.error(\"Elemento 'icono' o 'spinner' no encontrado.\");\n        return;\n    }\n\n    const REDIRECT_DELAY = 1000; // Tiempo antes de mostrar el spinner (opcional)\n\n    // Función para enviar datos del clic (puedes mantener la lógica existente)\n    const sendClickEvent = async () => {\n        const eventData = {\n            event: \"click_pollito\",\n            timestamp: new Date().toISOString()\n        };\n        try {\n            await fetch(\"https://powerautomate-webhook.com\", {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify(eventData)\n            });\n        } catch (error) {\n            console.error(\"Error al enviar el evento.\", error);\n            // Aquí podrías guardar el evento localmente si lo deseas.\n        }\n        \n        if (typeof gtag === \"function\") {\n            gtag('event', 'click_pollito', {\n                'event_category': 'Interacción',\n                'event_label': 'Icono Pollito',\n                'value': 1\n            });\n        }\n    };\n\n    // Función para manejar el clic en el pollito\n    const handlePollitoClick = () => {\n        console.log(\"🐥 Clic en el pollito registrado\");\n        sendClickEvent();\n\n        // Agregar la clase \"bounce\" para feedback visual\n        pollito.classList.add(\"bounce\");\n\n        pollito.addEventListener(\"animationend\", function restoreAnimation(e) {\n            if (e.animationName === \"bounce\") {\n                pollito.style.display = \"none\";\n                spinner.style.display = \"block\";\n                pollito.classList.remove(\"bounce\");\n                pollito.removeEventListener(\"animationend\", restoreAnimation);\n            }\n        });\n\n        // En lugar de redirigir inmediatamente, mostramos el banner de cookies\n        // Se asume que cookies.js define la función global showCookieBanner()\n        setTimeout(() => {\n            if (typeof showCookieBanner === \"function\") {\n                showCookieBanner();\n            } else {\n                console.warn(\"No se encontró la función showCookieBanner(). Redirigiendo de forma predeterminada.\");\n                const lang = localStorage.getItem(\"idioma\") || \"es\";\n                window.redirectTo(`simbiosis_${lang}.html`);\n            }\n        }, REDIRECT_DELAY);\n    };\n\n    pollito.addEventListener(\"click\", handlePollitoClick);\n});\n\n// Opcional: Agregar la animación bounce dinámicamente (si no está en CSS)\nconst style = document.createElement(\"style\");\nstyle.innerHTML = `\n    @keyframes bounce {\n        0%, 100% { transform: scale(1); }\n        50% { transform: scale(1.2); }\n    }\n`;\ndocument.head.appendChild(style);\n\n```",
  "tags": "JavaScript [[--- 🌀 Helices de desarrollo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[--- Codigo]] [[⚙️🧬 src/]]",
  "type": "text/markdown",
  "created": "20250605164433551",
  "modified": "20250605164433551"
}