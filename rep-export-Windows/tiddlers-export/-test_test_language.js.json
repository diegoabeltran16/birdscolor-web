{
  "title": "-test_test_language.js",
  "text": "## [[Tags]]\nJavaScript [[--- 🌀 Helices de desarrollo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[--- Codigo]] [[⚙️🧪 tests/]]\n\n```javascript\n// test_language.js\n\nimport { expect } from 'chai';\nimport { JSDOM, ResourceLoader, VirtualConsole } from 'jsdom';\nimport sinon from 'sinon';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport assert from 'node:assert';\n\n\n\ndescribe('Language Module Tests', function() {\n  let dom, window, document;\n\n  // Configuramos JSDOM con un HTML mínimo que incluya los elementos necesarios.\n  beforeEach(function(done) {\n    dom = new JSDOM(\n      `<!DOCTYPE html>\n      <html lang=\"es\">\n      <head>\n        <meta charset=\"UTF-8\">\n        <title>Test</title>\n      </head>\n      <body>\n        <div id=\"icono\"></div>\n        <div id=\"spinner\"></div>\n      </body>\n      </html>`,\n      {\n        url: \"http://localhost/index.html\",\n        runScripts: \"dangerously\",\n        resources: \"usable\"\n      }\n    );\n    window = dom.window;\n    document = window.document;\n    // Limpiamos localStorage antes de cada prueba\n    window.localStorage.clear();\n    done();\n  });\n\n  afterEach(function() {\n    // Cerramos la instancia de JSDOM\n    dom.window.close();\n  });\n\n  it('should set localStorage \"idioma\" based on navigator.language if not present', function(done) {\n    // Forzamos el valor de navigator.language\n    Object.defineProperty(window.navigator, 'language', {\n      value: \"es-ES\",\n      configurable: true\n    });\n    \n    // Simulamos la carga de language.js inyectando su código en el DOM.\n    const languageScript = `\n      document.addEventListener(\"DOMContentLoaded\", function() {\n          if (!localStorage.getItem(\"idioma\")) {\n              const userLang = navigator.language || navigator.userLanguage;\n              const langCode = userLang.startsWith(\"es\") ? \"es\" : \"en\";\n              localStorage.setItem(\"idioma\", langCode);\n          }\n      });\n      function cambiarIdioma(lang) {\n          localStorage.setItem(\"idioma\", lang);\n          window.redirectTo(\"simbiosis_\" + lang + \".html\");\n      }\n    `;\n    const scriptEl = document.createElement(\"script\");\n    scriptEl.textContent = languageScript;\n    document.body.appendChild(scriptEl);\n\n    // Disparamos el evento DOMContentLoaded\n    document.dispatchEvent(new window.Event(\"DOMContentLoaded\"));\n    \n    // Damos un pequeño retardo para que se ejecute el listener.\n    setTimeout(function() {\n      const idioma = window.localStorage.getItem(\"idioma\");\n      assert.strictEqual(idioma, \"es\");\n      done();\n    }, 0);\n  });\n\n  it('cambiarIdioma should update localStorage and call global redirectTo', function() {\n    // Stub de window.redirectTo para evitar navegación real y capturar la URL.\n    const redirectStub = sinon.stub();\n    window.redirectTo = redirectStub;\n    \n    // Inyectamos la definición de la función cambiarIdioma (si no se cargó ya)\n    const languageScript = `\n      function cambiarIdioma(lang) {\n          localStorage.setItem(\"idioma\", lang);\n          window.redirectTo(\"simbiosis_\" + lang + \".html\");\n      }\n    `;\n    const scriptEl = document.createElement(\"script\");\n    scriptEl.textContent = languageScript;\n    document.body.appendChild(scriptEl);\n\n    // Llamamos a la función cambiarIdioma con \"en\"\n    window.cambiarIdioma(\"en\");\n    \n    // Verificamos que localStorage se actualizó\n    assert.strictEqual(window.localStorage.getItem(\"idioma\"), \"en\");\n    // Verificamos que se llamó a redirectTo con la URL correcta\n    assert(redirectStub.calledOnce, \"redirectTo debe haberse llamado una vez\");\n    assert(redirectStub.calledWith(\"simbiosis_en.html\"), \"redirectTo debe llamarse con 'simbiosis_en.html'\");\n  });\n});\n\n```",
  "tags": "JavaScript [[--- 🌀 Helices de desarrollo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[--- Codigo]] [[⚙️🧪 tests/]]",
  "type": "text/markdown",
  "created": "20250605164433789",
  "modified": "20250605164433789"
}