{
  "title": "-rep-export-Windows_tiddler_exporter.py",
  "text": "## [[Tags]]\n[[Python]]\n\n```python\n#!/usr/bin/env python3\n\"\"\"\nüì¶ Script: tiddler_exporter.py\nüñ•Ô∏è Plataforma: Windows (PowerShell/Command Prompt)\n\nFunci√≥n:\nEste script recorre todos los archivos fuente del repositorio y detecta cambios\nusando hashes para generar archivos `.json` (tiddlers) para TiddlyWiki.\nCada tiddler contiene:\n  - T√≠tulo prefijado con `-` basado en la ruta relativa al repositorio\n  - Tags sem√°nticos obtenidos desde `tag_mapper.py`\n  - Bloque Markdown con syntax highlighting apropiado seg√∫n el lenguaje\n\nMejoras realizadas:\n  - Se ampl√≠a la lista de extensiones admitidas para incluir lenguajes comunes\n  - Mapeos extendidos en `LANGUAGE_MAP` (JS, TS, Java, C, C++, Rust, PHP, etc.)\n  - Manejo de archivos especiales como `Dockerfile`, `Makefile`, `.gitignore`, etc.\n  - Solo exporta archivos cuyo hash haya cambiado, para eficiencia\n  - Compatible con Python 3.7+ en Windows\n\nUso:\n  # Exporta solo archivos modificados\n  python scripts/tiddler_exporter.py\n\n  # Modo simulaci√≥n: muestra qu√© se actualizar√≠a sin escribir archivos\n  python rep-export-Windows\\tiddler_exporter.py --dry run\n\"\"\"\nimport os\nimport json\nimport hashlib\nfrom datetime import datetime, timezone\nfrom pathlib import Path\nimport tag_mapper  # Debe estar en el mismo directorio o en PATH\n\n# ==========================\n# ‚öôÔ∏è CONFIGURACI√ìN GENERAL\n# ==========================\n\n# ROOT_DIR apunta a la ra√≠z del repositorio (dos niveles arriba de este script)\nROOT_DIR = Path(__file__).resolve().parents[1]\nSCRIPT_DIR = Path(__file__).parent\nOUTPUT_DIR = SCRIPT_DIR / \"tiddlers-export\"\nHASH_FILE = SCRIPT_DIR / \".hashes.json\"\n\n# Extensiones v√°lidas (archivos que se convierten en tiddlers)\nVALID_EXTENSIONS = [\n    '.py', '.md', '.json', '.sh', '.html', '.css', '.yml', '.yaml', '.txt',\n    '.js', '.jsx', '.ts', '.tsx', '.java', '.c', '.cpp', '.cc', '.h', '.hpp',\n    '.cs', '.rb', '.go', '.rs', '.php', '.pl', '.lua', '.kt', '.kts', '.swift',\n    '.xml', '.sql', '.toml', '.csv', '.ini', '.cfg', '.dockerfile', '.bat', '.ps1'\n]\n# Nombres de archivos sin extensi√≥n que queremos incluir\nALLOWED_FILENAMES = ['.gitignore', 'Dockerfile', 'Makefile', 'README']\n\n# Directorios a ignorar durante la recursi√≥n\nIGNORE_DIRS = [\n    '__pycache__', 'venv', '.venv', 'dist', 'node_modules', 'output', 'input',\n    '.pytest_cache', 'configs', 'media', 'project_details', 'tiddlers-export'\n]\n\n# Mapeo de extensiones a lenguajes para syntax highlighting en Markdown\nLANGUAGE_MAP = {\n    '.py': 'python',\n    '.md': 'markdown',\n    '.json': 'json',\n    '.sh': 'bash',\n    '.bat': 'batch',\n    '.ps1': 'powershell',\n    '.yml': 'yaml',\n    '.yaml': 'yaml',\n    '.html': 'html',\n    '.css': 'css',\n    '.js': 'javascript',\n    '.jsx': 'javascript',\n    '.ts': 'typescript',\n    '.tsx': 'typescript',\n    '.java': 'java',\n    '.c': 'c',\n    '.cpp': 'cpp',\n    '.cc': 'cpp',\n    '.h': 'cpp',\n    '.hpp': 'cpp',\n    '.cs': 'csharp',\n    '.rb': 'ruby',\n    '.go': 'go',\n    '.rs': 'rust',\n    '.php': 'php',\n    '.pl': 'perl',\n    '.lua': 'lua',\n    '.kt': 'kotlin',\n    '.kts': 'kotlin',\n    '.swift': 'swift',\n    '.xml': 'xml',\n    '.sql': 'sql',\n    '.toml': 'toml',\n    '.csv': 'csv',\n    '.ini': 'ini',\n    '.cfg': 'cfg'\n}\n\n# Archivos especiales a reconocer por nombre\nSPECIAL_LANGUAGES = {\n    '.gitignore': 'gitignore',\n    'Dockerfile': 'dockerfile',\n    'Makefile': 'makefile',\n    'README': 'markdown'\n}\n\n# ==============================\n# üîé FUNCIONES AUXILIARES\n# ==============================\n\ndef get_all_files(directory: Path):\n    \"\"\"\n    Recorre recursivamente 'directory' y devuelve una lista de Path\n    para archivos v√°lidos seg√∫n VALID_EXTENSIONS o ALLOWED_FILENAMES,\n    excluyendo carpetas en IGNORE_DIRS.\n    \"\"\"\n    all_files = []\n    for root, dirs, files in os.walk(directory):\n        dirs[:] = [d for d in dirs if d not in IGNORE_DIRS]\n        for filename in files:\n            ext = Path(filename).suffix.lower()\n            # Chequea extensiones v√°lidas o nombres especiales (sin extensi√≥n)\n            if ext in VALID_EXTENSIONS or filename in ALLOWED_FILENAMES:\n                all_files.append(Path(root) / filename)\n    return all_files\n\ndef get_hash(content: str) -> str:\n    \"\"\"\n    Calcula el hash SHA-1 de una cadena (usada para detectar cambios).\n    \"\"\"\n    return hashlib.sha1(content.encode('utf-8')).hexdigest()\n\ndef safe_title(path: Path) -> str:\n    \"\"\"\n    Convierte una ruta de archivo en un t√≠tulo v√°lido para tiddler:\n    - Prefijo '-' (por convenci√≥n TiddlyWiki)\n    - Reemplaza separadores de ruta por '_'\n    Ejemplo: 'src/utils/helper.py' ‚Üí '-src_utils_helper.py'\n    \"\"\"\n    return '-' + str(path.relative_to(ROOT_DIR)).replace(os.sep, '_')\n\ndef detect_language(file_path: Path) -> str:\n    \"\"\"\n    Determina el lenguaje para el bloque de c√≥digo en Markdown:\n    1. Si el nombre est√° en SPECIAL_LANGUAGES, lo usa.\n    2. En otro caso, busca la extensi√≥n en LANGUAGE_MAP.\n    3. Por defecto, devuelve 'text'.\n    \"\"\"\n    name = file_path.name\n    if name in SPECIAL_LANGUAGES:\n        return SPECIAL_LANGUAGES[name]\n    ext = file_path.suffix.lower()\n    return LANGUAGE_MAP.get(ext, 'text')\n\n# ==============================\n# üöÄ EXPORTADOR PRINCIPAL\n# ==============================\n\ndef export_tiddlers(dry_run=False):\n    \"\"\"\n    Recorre todos los archivos v√°lidos en ROOT_DIR, calcula sus hashes y\n    exporta solo los que cambiaron a la carpeta OUTPUT_DIR.\n\n    - Si dry_run=True, solo imprime qu√© archivos cambiar√≠an.\n    \"\"\"\n    OUTPUT_DIR.mkdir(parents=True, exist_ok=True)\n\n    # Carga hashes previos o inicia vac√≠o\n    if HASH_FILE.exists():\n        try:\n            with open(HASH_FILE, 'r', encoding='utf-8') as f:\n                old_hashes = json.load(f)\n        except Exception:\n            print(f\"‚ö†Ô∏è No se pudo leer {HASH_FILE}. Se reiniciar√°n hashes.\")\n            old_hashes = {}\n    else:\n        old_hashes = {}\n\n    new_hashes = {}\n    changed_files = []\n\n    for file_path in get_all_files(ROOT_DIR):\n        rel_path = str(file_path.relative_to(ROOT_DIR))\n        try:\n            content = file_path.read_text(encoding='utf-8')\n        except Exception as e:\n            print(f\"‚ö†Ô∏è Error leyendo {rel_path}: {e}\")\n            continue\n\n        hash_now = get_hash(content)\n        new_hashes[rel_path] = hash_now\n\n        # Si no cambi√≥, saltar\n        if old_hashes.get(rel_path) == hash_now:\n            continue\n\n        # Construir tiddler\n        title = safe_title(file_path)\n        tags = tag_mapper.get_tags_for_file(file_path)\n        lang = detect_language(file_path)\n\n        text_block = (\n            \"## [[Tags]]\\n\"\n            f\"{' '.join(tags)}\\n\\n\"\n            f\"```{lang}\\n{content}\\n```\"\n        )\n\n        tiddler = {\n            \"title\": title,\n            \"text\": text_block,\n            \"tags\": ' '.join(tags),\n            \"type\": \"text/markdown\",\n            \"created\": datetime.now(timezone.utc).strftime('%Y%m%d%H%M%S%f')[:17],\n            \"modified\": datetime.now(timezone.utc).strftime('%Y%m%d%H%M%S%f')[:17],\n        }\n\n        if dry_run:\n            print(f\"[dry-run] Detectado cambio en: {rel_path}\")\n            continue\n\n        out_file = OUTPUT_DIR / f\"{title}.json\"\n        try:\n            with open(out_file, 'w', encoding='utf-8') as f:\n                json.dump(tiddler, f, indent=2, ensure_ascii=False)\n        except Exception as e:\n            print(f\"‚ö†Ô∏è No se pudo escribir {out_file}: {e}\")\n            continue\n\n        changed_files.append(rel_path)\n\n    # Actualizar hashes si no es dry_run\n    if not dry_run:\n        try:\n            with open(HASH_FILE, 'w', encoding='utf-8') as f:\n                json.dump(new_hashes, f, indent=2)\n        except Exception as e:\n            print(f\"‚ö†Ô∏è No se pudo escribir {HASH_FILE}: {e}\")\n\n    # Informe final\n    print(f\"\\nüì¶ Archivos modificados: {len(changed_files)}\")\n    if changed_files:\n        for path in changed_files:\n            print(f\"  ‚úÖ Exportado: {path}\")\n    else:\n        print(\"  üîÅ Sin cambios detectados.\")\n\n# ==============================\n# üß™ CLI: Entrada directa\n# ==============================\n\nif __name__ == \"__main__\":\n    import sys\n    dry = '--dry-run' in sys.argv\n    export_tiddlers(dry_run=dry)\n\n```",
  "tags": "[[Python]]",
  "type": "text/markdown",
  "created": "20250605155131388",
  "modified": "20250605155131388"
}