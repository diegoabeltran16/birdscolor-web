{
  "title": "-test_test_interaction.js",
  "text": "## [[Tags]]\nJavaScript [[--- 🌀 Helices de desarrollo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[--- Codigo]] [[⚙️🧪 tests/]]\n\n```javascript\n// test/test_interaction.js\n\nimport { expect } from 'chai';\nimport { JSDOM, ResourceLoader, VirtualConsole } from 'jsdom';\nimport sinon from 'sinon';\nimport fs from 'node:fs';\nimport path, { dirname } from 'node:path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\ndescribe('Interacción con el ícono del pollito', function () {\n  let window, document, pollito, spinner, clock;\n  const REDIRECT_DELAY = 1000;\n  const EXPECTED_REDIRECT = \"simbiosis_es.html\";\n\n  beforeEach(async () => {\n    // Fake timers para controlar el tiempo\n    clock = sinon.useFakeTimers();\n\n    const htmlPath = path.join(__dirname, '../src/pages/index.html');\n    if (!fs.existsSync(htmlPath)) {\n      throw new Error(`Archivo HTML no encontrado: ${htmlPath}`);\n    }\n\n    const html = fs.readFileSync(htmlPath, 'utf8');\n\n    const resourceLoader = new ResourceLoader({\n      fetch(url) {\n        // Ignoramos scripts externos en tests\n        return Promise.resolve(Buffer.from(''));\n      }\n    });\n\n    const dom = new JSDOM(html, {\n      runScripts: \"dangerously\",\n      resources: resourceLoader,\n      url: \"http://localhost/\",\n      virtualConsole: new VirtualConsole()\n    });\n\n    await new Promise(resolve => {\n      dom.window.document.addEventListener(\"DOMContentLoaded\", resolve);\n    });\n\n    window = dom.window;\n    document = window.document;\n    pollito = document.getElementById(\"icono\");\n    spinner = document.getElementById(\"spinner\");\n\n    if (!pollito || !spinner) {\n      throw new Error(\"Elemento 'icono' o 'spinner' no encontrado en el DOM.\");\n    }\n\n    // Simulamos la lógica de script.js\n    const simulatedScript = `\n      function redirectTo(url) {\n        window.__redirectedUrl = url;\n      }\n\n      document.getElementById(\"icono\").addEventListener(\"click\", function() {\n        document.getElementById(\"spinner\").style.display = \"block\";\n        setTimeout(() => {\n          redirectTo(\"simbiosis_es.html\");\n        }, 1000);\n      });\n    `;\n    const scriptEl = document.createElement(\"script\");\n    scriptEl.textContent = simulatedScript;\n    document.body.appendChild(scriptEl);\n\n    // Inicializamos variable de prueba\n    window.__redirectedUrl = \"\";\n  });\n\n  afterEach(() => {\n    clock.restore();\n  });\n\n  it('Debe redirigir después del tiempo definido (diagnóstico con fake timers)', function () {\n    pollito.dispatchEvent(new window.Event(\"click\", { bubbles: true }));\n    clock.tick(REDIRECT_DELAY + 100);\n    expect(window.__redirectedUrl).to.include(EXPECTED_REDIRECT);\n  });\n});\n\n```",
  "tags": "JavaScript [[--- 🌀 Helices de desarrollo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[--- Codigo]] [[⚙️🧪 tests/]]",
  "type": "text/markdown",
  "created": "20250605164433745",
  "modified": "20250605164433745"
}