{
  "title": "-rep-export-Windows_generate_structure.py",
  "text": "## [[Tags]]\n[[Python]]\n\n```python\n\"\"\"\n📦 Script: generate_structure_windows.py\n🖥️ Plataforma: Windows (PowerShell/Command Prompt)\n\nObjetivo\n========\nGenerar `estructura.txt` en la raíz del repositorio con una representación\nASCII del árbol de carpetas y archivos, **codificado en UTF‑8**, con detección\nde dependencias y manejo robusto de errores.\n\nMejoras sobre la versión original\n--------------------------------\n1. **Detección de PowerShell y fallback a cmd.exe**\n2. **Verificación de la presencia del comando *tree***\n3. **`subprocess.run(..., check=True)`** para propagar códigos de error.\n4. **Manejo explícito de excepciones** (`FileNotFoundError`,\n   `subprocess.CalledProcessError`).\n5. **Mensajes de diagnóstico coherentes** para el usuario.\n6. **Uso de rutas seguras** (`Path` → cadena con comillas dobles escapadas).\n\nRequisitos\n----------\n* Windows 10 o superior (o Windows Server).\n* Python 3.8+.\n\nUso\n---\n```powershell\npython rep-export-Windows\\generate_structure.py\n```\nAñade la ruta al `PATH` si decides moverlo a otra carpeta.\n\"\"\"\n\nfrom __future__ import annotations\n\nimport shutil\nimport subprocess\nimport sys\nfrom pathlib import Path\nfrom typing import Sequence, Optional\n\n# ----------------------------\n# 🛠️  Funciones auxiliares\n# ----------------------------\n\n\ndef _find_powershell() -> Optional[str]:\n    \"\"\"Devuelve la ruta a *powershell.exe* o *pwsh*, o *None* si no existe.\"\"\"\n    return shutil.which(\"powershell\") or shutil.which(\"pwsh\")\n\n\ndef _build_command(out_path: Path) -> tuple[Sequence[str], bool]:\n    \"\"\"Construye el comando adecuado y devuelve `(cmd, shell)`.\n\n    * Si hay PowerShell disponible se usa `Out-File` (UTF‑8).\n    * En caso contrario se hace *fallback* a `cmd.exe /c tree`.\n    \"\"\"\n    out_quoted = f\"\\\"{out_path}\\\"\"  # comillas dobles para rutas con espacios\n\n    powershell = _find_powershell()\n    if powershell:\n        # Nota: `-NoProfile` acelera y evita scripts no confiables\n        cmd = [\n            powershell,\n            \"-NoProfile\",\n            \"-Command\",\n            f\"tree /F /A | Out-File -FilePath {out_quoted} -Encoding utf8\",\n        ]\n        return cmd, False  # shell innecesario\n\n    # --- Fallback a cmd.exe -------------------------------------------------\n    if shutil.which(\"cmd\") is None:\n        raise FileNotFoundError(\n            \"No se encontró PowerShell ni cmd.exe en el sistema; no es posible ejecutar 'tree'.\"\n        )\n\n    cmd = [\n        \"cmd\",\n        \"/c\",\n        f\"tree /F /A > {out_quoted}\"\n    ]\n    return cmd, False\n\n\n# ----------------------------\n# 🚀 Función principal\n# ----------------------------\n\n\ndef generate_structure_file() -> None:\n    \"\"\"Genera `estructura.txt` con salida UTF‑8, manejando errores de forma explícita.\"\"\"\n    root_dir = Path(__file__).resolve().parents[1]\n    out_path = root_dir / \"estructura.txt\"\n\n    # Asegurarse de que el comando *tree* está disponible (es interno, pero puede faltar)\n    if shutil.which(\"tree\") is None:\n        print(\n            \"❌ El comando 'tree' no está disponible en el sistema. \"\n            \"Instálalo con Winget (winget install gnuwin32.tree) o añade una alternativa compatible.\"\n        )\n        sys.exit(1)\n\n    cmd, use_shell = _build_command(out_path)\n\n    try:\n        subprocess.run(cmd, cwd=root_dir, check=True, shell=use_shell)\n    except (FileNotFoundError, subprocess.CalledProcessError) as exc:\n        print(\"❌ Error al ejecutar el comando para generar la estructura:\")\n        print(f\"   {exc}\")\n        sys.exit(1)\n\n    print(\"\\n📂 Estructura del proyecto exportada a:\")\n    print(f\"   {out_path}\")\n\n\n# ----------------------------\n# 🏁 Entrada directa\n# ----------------------------\n\nif __name__ == \"__main__\":\n    generate_structure_file()\n\n```",
  "tags": "[[Python]]",
  "type": "text/markdown",
  "created": "20250605155046621",
  "modified": "20250605155046621"
}